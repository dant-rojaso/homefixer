package com.homefixer.autenticacion.service;

import com.homefixer.autenticacion.model.Sesion; // Importa entidad Sesion
import com.homefixer.autenticacion.repository.SesionRepository; // Importa repositorio
import lombok.RequiredArgsConstructor; // Constructor autom√°tico
import org.springframework.stereotype.Service; // Anotaci√≥n servicio
import java.time.LocalDateTime; // Para fechas
import java.util.List; // Para listas
import java.util.Optional; // Para opcionales
import java.util.UUID; // Para generar tokens √∫nicos

@Service // Marca como servicio Spring
@RequiredArgsConstructor // Constructor autom√°tico
public class SesionService {
    
    private final SesionRepository sesionRepository; // Repositorio inyectado
    
    // Iniciar nueva sesi√≥n
    public Sesion iniciarSesion(Long idUsuario, String ipCliente, String userAgent) {
        System.out.println("üöÄ Iniciando sesi√≥n para usuario: " + idUsuario); // Log inicio
        
        // Cerrar sesiones activas anteriores del usuario
        List<Sesion> sesionesActivas = sesionRepository.findByIdUsuarioAndEstado(idUsuario, Sesion.EstadoSesion.ACTIVA);
        for (Sesion sesionActiva : sesionesActivas) {
            sesionActiva.setEstado(Sesion.EstadoSesion.CERRADA); // Cierra sesi√≥n anterior
            sesionActiva.setFechaFin(LocalDateTime.now()); // Marca fecha de cierre
            sesionRepository.save(sesionActiva); // Guarda cambio
        }
        
        // Extraer informaci√≥n del user agent
        String dispositivo = extraerDispositivo(userAgent); // Extrae tipo de dispositivo
        String navegador = extraerNavegador(userAgent); // Extrae navegador
        
        // Crear nueva sesi√≥n
        Sesion nuevaSesion = Sesion.builder()
            .idUsuario(idUsuario) // Usuario que inicia sesi√≥n
            .tokenSesion(generarTokenSesion()) // Token √∫nico de sesi√≥n
            .fechaInicio(LocalDateTime.now()) // Fecha actual
            .fechaUltimoAcceso(LocalDateTime.now()) // √öltima actividad
            .estado(Sesion.EstadoSesion.ACTIVA) // Estado activo
            .ipCliente(ipCliente) // IP del cliente
            .dispositivo(dispositivo) // Tipo de dispositivo
            .navegador(navegador) // Navegador usado
            .build(); // Construye objeto
        
        Sesion sesionGuardada = sesionRepository.save(nuevaSesion); // Guarda en BD
        System.out.println("‚úÖ Sesi√≥n iniciada con ID: " + sesionGuardada.getIdSesion()); // Log √©xito
        
        return sesionGuardada; // Retorna sesi√≥n creada
    }
    
    // Actualizar √∫ltimo acceso de sesi√≥n
    public void actualizarUltimoAcceso(String tokenSesion) {
        System.out.println("üîÑ Actualizando √∫ltimo acceso para sesi√≥n"); // Log actualizaci√≥n
        
        Optional<Sesion> sesionOpt = sesionRepository.findByTokenSesionAndEstado(tokenSesion, Sesion.EstadoSesion.ACTIVA); // Busca sesi√≥n activa
        
        if (sesionOpt.isPresent()) {
            Sesion sesion = sesionOpt.get(); // Obtiene sesi√≥n
            sesion.setFechaUltimoAcceso(LocalDateTime.now()); // Actualiza √∫ltimo acceso
            sesionRepository.save(sesion); // Guarda cambio
            System.out.println("‚úÖ √öltimo acceso actualizado"); // Log √©xito
        } else {
            System.out.println("‚ùå Sesi√≥n no encontrada para actualizar"); // Log error
        }
    }
    
    // Cerrar sesi√≥n
    public void cerrarSesion(String tokenSesion) {
        System.out.println("üîö Cerrando sesi√≥n"); // Log cierre
        
        Optional<Sesion> sesionOpt = sesionRepository.findByTokenSesion(tokenSesion); // Busca sesi√≥n
        
        if (sesionOpt.isPresent()) {
            Sesion sesion = sesionOpt.get(); // Obtiene sesi√≥n
            sesion.setEstado(Sesion.EstadoSesion.CERRADA); // Cambia estado a cerrada
            sesion.setFechaFin(LocalDateTime.now()); // Marca fecha de cierre
            sesionRepository.save(sesion); // Guarda cambio
            System.out.println("‚úÖ Sesi√≥n cerrada exitosamente"); // Log √©xito
        } else {
            System.out.println("‚ùå Sesi√≥n no encontrada para cerrar"); // Log error
        }
    }
    
    // Validar sesi√≥n activa
    public boolean validarSesion(String tokenSesion) {
        System.out.println("üîç Validando sesi√≥n"); // Log validaci√≥n
        
        Optional<Sesion> sesionOpt = sesionRepository.findByTokenSesionAndEstado(tokenSesion, Sesion.EstadoSesion.ACTIVA); // Busca sesi√≥n activa
        
        if (sesionOpt.isPresent()) {
            Sesion sesion = sesionOpt.get(); // Obtiene sesi√≥n
            
            // Verificar si la sesi√≥n ha estado inactiva por m√°s de 2 horas
            LocalDateTime limite = LocalDateTime.now().minusHours(2); // 2 horas atr√°s
            if (sesion.getFechaUltimoAcceso().isBefore(limite)) {
                System.out.println("‚ùå Sesi√≥n expirada por inactividad"); // Log error
                sesion.setEstado(Sesion.EstadoSesion.EXPIRADA); // Marca como expirada
                sesionRepository.save(sesion); // Guarda cambio
                return false; // Sesi√≥n expirada
            }
            
            System.out.println("‚úÖ Sesi√≥n v√°lida"); // Log √©xito
            return true; // Sesi√≥n v√°lida
        }
        
        System.out.println("‚ùå Sesi√≥n no v√°lida"); // Log error
        return false; // Sesi√≥n no v√°lida
    }
    
    // Obtener sesiones de un usuario
    public List<Sesion> obtenerSesionesUsuario(Long idUsuario) {
        System.out.println("üìã Obteniendo sesiones del usuario: " + idUsuario); // Log consulta
        return sesionRepository.findByIdUsuario(idUsuario); // Retorna todas las sesiones del usuario
    }
    
    // Cerrar todas las sesiones de un usuario
    public void cerrarTodasSesionesUsuario(Long idUsuario) {
        System.out.println("üîö Cerrando todas las sesiones del usuario: " + idUsuario); // Log cierre masivo
        
        List<Sesion> sesionesActivas = sesionRepository.findByIdUsuarioAndEstado(idUsuario, Sesion.EstadoSesion.ACTIVA); // Busca sesiones activas
        
        for (Sesion sesion : sesionesActivas) {
            sesion.setEstado(Sesion.EstadoSesion.REVOCADA); // Marca como revocada
            sesion.setFechaFin(LocalDateTime.now()); // Marca fecha de cierre
            sesionRepository.save(sesion); // Guarda cambio
        }
        
        System.out.println("‚úÖ Cerradas " + sesionesActivas.size() + " sesiones"); // Log √©xito
    }
    
    // Limpiar sesiones inactivas
    public void limpiarSesionesInactivas() {
        System.out.println("üßπ Limpiando sesiones inactivas"); // Log limpieza
        
        LocalDateTime limite = LocalDateTime.now().minusHours(24); // 24 horas atr√°s
        List<Sesion> sesionesInactivas = sesionRepository.encontrarSesionesInactivas(limite); // Busca sesiones inactivas
        
        for (Sesion sesion : sesionesInactivas) {
            sesion.setEstado(Sesion.EstadoSesion.EXPIRADA); // Marca como expirada
            sesionRepository.save(sesion); // Guarda cambio
        }
        
        System.out.println("‚úÖ Limpiadas " + sesionesInactivas.size() + " sesiones inactivas"); // Log √©xito
    }
    
    // M√©todo privado para generar token √∫nico de sesi√≥n
    private String generarTokenSesion() {
        return "SES_" + UUID.randomUUID().toString().replace("-", ""); // Token de sesi√≥n con prefijo SES
    }
    
    // M√©todo privado para extraer dispositivo del user agent
    private String extraerDispositivo(String userAgent) {
        if (userAgent == null) return "Desconocido"; // Si no hay user agent
        
        if (userAgent.toLowerCase().contains("mobile")) return "M√≥vil"; // Dispositivo m√≥vil
        if (userAgent.toLowerCase().contains("tablet")) return "Tablet"; // Tablet
        return "Desktop"; // Por defecto desktop
    }
    
    // M√©todo privado para extraer navegador del user agent
    private String extraerNavegador(String userAgent) {
        if (userAgent == null) return "Desconocido"; // Si no hay user agent
        
        String userAgentLower = userAgent.toLowerCase(); // Convierte a min√∫sculas
        
        if (userAgentLower.contains("chrome")) return "Chrome"; // Chrome
        if (userAgentLower.contains("firefox")) return "Firefox"; // Firefox
        if (userAgentLower.contains("edge")) return "Edge"; // Edge
        return "Otro"; // Navegador no identificado
    }
}