package com.homefixer.usuarios.service;

import com.homefixer.usuarios.model.Usuario; // Importa entidad Usuario
import com.homefixer.usuarios.repository.UsuarioRepository; // Importa repositorio
import lombok.RequiredArgsConstructor; // Lombok para constructor autom√°tico
import lombok.extern.slf4j.Slf4j; // Para logging
import org.springframework.stereotype.Service; // Marca como servicio
import java.time.LocalDateTime; // Para fechas
import java.util.List; // Para listas
import java.util.Optional; // Para opcionales

@Service // Marca esta clase como servicio de Spring
@RequiredArgsConstructor // Lombok: constructor autom√°tico para campos final
@Slf4j // Lombok: a√±ade logger autom√°ticamente
public class UsuarioService {
    
    private final UsuarioRepository usuarioRepository; // Inyecci√≥n de dependencia autom√°tica
    
    // Crear nuevo usuario
    public Usuario crearUsuario(Usuario usuario) {
        log.info("‚úÖ Creando nuevo usuario: {}", usuario.getEmail()); // Log de inicio
        
        // Validar que el email no exista
        if (usuarioRepository.existsByEmail(usuario.getEmail())) {
            log.error("‚ùå Email ya existe: {}", usuario.getEmail()); // Log de error
            throw new RuntimeException("El email ya est√° registrado"); // Excepci√≥n simple
        }
        
        usuario.setFechaRegistro(LocalDateTime.now()); // Establece fecha actual
        usuario.setActivo(true); // Usuario activo por defecto
        
        Usuario usuarioGuardado = usuarioRepository.save(usuario); // Guarda en BD
        log.info("‚úÖ Usuario creado exitosamente con ID: {}", usuarioGuardado.getIdUsuario()); // Log de √©xito
        
        return usuarioGuardado; // Retorna usuario guardado
    }
    
    // Buscar usuario por ID
    public Optional<Usuario> buscarPorId(Long id) {
        log.info("üîç Buscando usuario por ID: {}", id); // Log de b√∫squeda
        return usuarioRepository.findById(id); // Busca en BD
    }
    
    // Buscar todos los usuarios
    public List<Usuario> obtenerTodos() {
        log.info("üìã Obteniendo todos los usuarios"); // Log de consulta
        return usuarioRepository.findAll(); // Retorna todos
    }
    
    // Login b√°sico
    public Optional<Usuario> login(String email, String password) {
        log.info("üîê Intento de login para email: {}", email); // Log de login
        
        Optional<Usuario> usuario = usuarioRepository.findByEmailAndPassword(email, password); // Busca credenciales
        
        if (usuario.isPresent()) {
            log.info("‚úÖ Login exitoso para: {}", email); // Log de √©xito
        } else {
            log.warn("‚ùå Login fallido para: {}", email); // Log de fallo
        }
        
        return usuario; // Retorna usuario si existe
    }
    
    // Buscar usuarios por tipo
    public List<Usuario> buscarPorTipo(Usuario.TipoUsuario tipo) {
        log.info("üîç Buscando usuarios de tipo: {}", tipo); // Log de b√∫squeda
        return usuarioRepository.findByTipo(tipo); // Filtra por tipo
    }
    
    // Actualizar usuario
    public Usuario actualizarUsuario(Long id, Usuario usuarioActualizado) {
        log.info("üìù Actualizando usuario ID: {}", id); // Log de actualizaci√≥n
        
        Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usuario no encontrado")); // Busca o lanza excepci√≥n
        
        // Actualiza campos permitidos
        usuario.setNombre(usuarioActualizado.getNombre()); // Actualiza nombre
        usuario.setTelefono(usuarioActualizado.getTelefono()); // Actualiza tel√©fono
        
        Usuario guardado = usuarioRepository.save(usuario); // Guarda cambios
        log.info("‚úÖ Usuario actualizado exitosamente"); // Log de √©xito
        
        return guardado; // Retorna usuario actualizado
    }
    
    // Desactivar usuario (no eliminar)
    public void desactivarUsuario(Long id) {
        log.info("üîí Desactivando usuario ID: {}", id); // Log de desactivaci√≥n
        
        Usuario usuario = usuarioRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usuario no encontrado")); // Busca usuario
        
        usuario.setActivo(false); // Marca como inactivo
        usuarioRepository.save(usuario); // Guarda cambio
        
        log.info("‚úÖ Usuario desactivado exitosamente"); // Log de √©xito
    }
}